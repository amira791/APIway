# Generated by Django 4.2.1 on 2024-06-11 19:42

from django.conf import settings
import django.contrib.auth.models
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='UserBase',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.CharField(max_length=100, unique=True)),
                ('username', models.CharField(max_length=100, unique=True)),
                ('first_name', models.CharField(max_length=100)),
                ('last_name', models.CharField(max_length=100)),
                ('phone', models.CharField(max_length=100)),
                ('is_active', models.BooleanField(default=True)),
                ('is_staff', models.BooleanField(default=False)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Abonnement',
            fields=[
                ('id_subscription', models.AutoField(primary_key=True, serialize=False)),
                ('api_key', models.CharField(max_length=100)),
                ('start_date', models.DateField(auto_now=True)),
                ('end_date', models.DateField(auto_now=True)),
                ('statut', models.CharField(default='ended', max_length=20)),
                ('invoice', models.TextField()),
                ('quota_remaining', models.IntegerField(default=0)),
            ],
        ),
        migrations.CreateModel(
            name='API',
            fields=[
                ('id_api', models.AutoField(primary_key=True, serialize=False)),
                ('api_name', models.CharField(blank=True, max_length=100)),
                ('description', models.TextField(blank=True, help_text='Brief description of the API')),
                ('terms_of_use', models.TextField(blank=True, help_text='Terms and conditions for API usage', verbose_name='Terms of Use')),
                ('logo', models.ImageField(null=True, upload_to='assets/images/', verbose_name='Logo')),
                ('visibility', models.BooleanField(default=False, null=True, verbose_name='Visibility')),
                ('website', models.TextField(blank=True, help_text='Base link for API ', verbose_name='Web Site')),
            ],
        ),
        migrations.CreateModel(
            name='APIcategory',
            fields=[
                ('id_category', models.AutoField(primary_key=True, serialize=False)),
                ('label', models.CharField(max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='APIendpoint',
            fields=[
                ('id_endpoint', models.AutoField(primary_key=True, serialize=False)),
                ('title', models.CharField(max_length=100)),
                ('method', models.CharField(choices=[('GET', 'GET'), ('PUT', 'PUT'), ('PATCH', 'PATCH'), ('POST', 'POST'), ('DELETE', 'DELETE')], max_length=20, null=True)),
                ('path', models.TextField(default='/')),
                ('group', models.CharField(default='', max_length=255, null=True)),
                ('description', models.TextField(default='', help_text='Brief description of the endPoint')),
            ],
        ),
        migrations.CreateModel(
            name='APIForum',
            fields=[
                ('id_forum', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=200)),
                ('description', models.TextField()),
            ],
        ),
        migrations.CreateModel(
            name='BaseLink',
            fields=[
                ('baselink_id', models.AutoField(primary_key=True, serialize=False)),
                ('url', models.TextField(help_text='Base link for API endpoints', verbose_name='Base Link URL')),
            ],
        ),
        migrations.CreateModel(
            name='Consommateur',
            fields=[
                ('id_consommateur', models.AutoField(primary_key=True, serialize=False)),
                ('groups', models.ManyToManyField(to='auth.group')),
                ('user', models.OneToOneField(null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('user_permissions', models.ManyToManyField(to='auth.permission')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Functionnality',
            fields=[
                ('id_funct', models.AutoField(primary_key=True, serialize=False)),
                ('functName', models.CharField(max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='PricingModel',
            fields=[
                ('id_model', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(blank=True, max_length=255)),
                ('period', models.CharField(blank=True, choices=[('Daily', 'Daily'), ('Monthly', 'Monthly'), ('Yearly', 'Yearly')], max_length=100)),
                ('description', models.TextField(blank=True, help_text='Brief description of the pricing model')),
                ('is_active', models.BooleanField(default=True)),
                ('api', models.ForeignKey(null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='api_mapi.api')),
            ],
        ),
        migrations.CreateModel(
            name='Ticket',
            fields=[
                ('ticket_id', models.AutoField(primary_key=True, serialize=False)),
                ('title', models.CharField(max_length=500)),
                ('issue', models.TextField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('status', models.CharField(choices=[('open', 'Open'), ('in progress', 'In Progress'), ('closed', 'Closed')], default='open', max_length=20)),
                ('api_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api_mapi.api')),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api_mapi.consommateur')),
            ],
        ),
        migrations.CreateModel(
            name='TypeParam',
            fields=[
                ('id_TypeParam', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='TypeTarif',
            fields=[
                ('id_TypeTarif', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='TicketResponse',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('response_text', models.TextField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('ticket', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='responses', to='api_mapi.ticket')),
            ],
            options={
                'ordering': ['created_at'],
            },
        ),
        migrations.CreateModel(
            name='Thread',
            fields=[
                ('id_thread', models.AutoField(primary_key=True, serialize=False)),
                ('content', models.CharField(max_length=500)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('creator', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api_mapi.consommateur')),
                ('forum', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api_mapi.apiforum')),
            ],
        ),
        migrations.CreateModel(
            name='Tarification',
            fields=[
                ('id_tarif', models.AutoField(primary_key=True, serialize=False)),
                ('price', models.DecimalField(decimal_places=2, max_digits=10)),
                ('features', models.TextField()),
                ('quota_limit', models.IntegerField()),
                ('rate_limit', models.IntegerField()),
                ('priceId', models.CharField(default='price_1PDneKEwLPoE4RaHXfQcbdpj', max_length=50)),
                ('pricingModel', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='api_mapi.pricingmodel')),
                ('type', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='api_mapi.typetarif')),
            ],
        ),
        migrations.CreateModel(
            name='ResponseExample',
            fields=[
                ('id_response', models.AutoField(primary_key=True, serialize=False)),
                ('code_status', models.IntegerField(null=True)),
                ('title', models.CharField(max_length=100, null=True)),
                ('body', models.TextField(null=True)),
                ('id_endpoint', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='api_mapi.apiendpoint')),
            ],
        ),
        migrations.CreateModel(
            name='Fournisseur',
            fields=[
                ('id_fournisseur', models.AutoField(primary_key=True, serialize=False)),
                ('groups', models.ManyToManyField(to='auth.group')),
                ('user', models.OneToOneField(null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('user_permissions', models.ManyToManyField(to='auth.permission')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Endpoint_parameter',
            fields=[
                ('id_parameter', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100)),
                ('example_value', models.CharField(max_length=255, null=True)),
                ('required', models.BooleanField(default=False)),
                ('deleted', models.BooleanField(default=False)),
                ('id_endpoint', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='api_mapi.apiendpoint')),
                ('type_id', models.ForeignKey(default=1, on_delete=django.db.models.deletion.DO_NOTHING, to='api_mapi.typeparam')),
            ],
        ),
        migrations.CreateModel(
            name='Comment',
            fields=[
                ('id_comment', models.AutoField(primary_key=True, serialize=False)),
                ('message', models.TextField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('thread', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api_mapi.thread')),
            ],
        ),
        migrations.CreateModel(
            name='APIversion',
            fields=[
                ('id_version', models.AutoField(primary_key=True, serialize=False)),
                ('num_version', models.CharField(max_length=100, null=True)),
                ('state', models.CharField(choices=[('Active', 'Active'), ('Draft', 'Draft'), ('Deprecated', 'Deprecated')], max_length=50, null=True)),
                ('description', models.TextField(null=True)),
                ('date_version', models.DateField(auto_now=True)),
                ('current', models.BooleanField(default=False, null=True, verbose_name='Current Version')),
                ('api', models.ForeignKey(null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='api_mapi.api')),
                ('functions', models.ManyToManyField(null=True, to='api_mapi.functionnality')),
            ],
        ),
        migrations.CreateModel(
            name='APIUsage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(default=django.utils.timezone.now)),
                ('status_code', models.IntegerField()),
                ('response_time', models.FloatField()),
                ('endpoint', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='api_mapi.apiendpoint')),
                ('subscription', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api_mapi.abonnement')),
            ],
        ),
        migrations.CreateModel(
            name='ApiQueryParam',
            fields=[
                ('id_queryparams', models.AutoField(primary_key=True, serialize=False)),
                ('key', models.CharField(max_length=255)),
                ('example_value', models.CharField(max_length=255, null=True)),
                ('required', models.BooleanField(default=False)),
                ('endpoint', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='query_params', to='api_mapi.apiendpoint')),
                ('type_id', models.ForeignKey(default=1, on_delete=django.db.models.deletion.DO_NOTHING, to='api_mapi.typeparam')),
            ],
        ),
        migrations.CreateModel(
            name='ApiHeader',
            fields=[
                ('id_header', models.AutoField(primary_key=True, serialize=False)),
                ('key', models.CharField(max_length=255)),
                ('example_value', models.CharField(max_length=255, null=True)),
                ('required', models.BooleanField(default=False)),
                ('endpoint', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='headers', to='api_mapi.apiendpoint')),
            ],
        ),
        migrations.CreateModel(
            name='ApiEndpointBody',
            fields=[
                ('id_body', models.AutoField(primary_key=True, serialize=False)),
                ('media_type', models.CharField(max_length=255)),
                ('payload_name', models.CharField(max_length=255, null=True)),
                ('payload_description', models.TextField(help_text='Payload text', null=True, verbose_name='Payload text')),
                ('body_example', models.TextField(help_text='Example of a body', null=True, verbose_name='Example')),
                ('endpoint', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='body', to='api_mapi.apiendpoint')),
            ],
        ),
        migrations.AddField(
            model_name='apiendpoint',
            name='version',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='api_mapi.apiversion'),
        ),
        migrations.CreateModel(
            name='APIdocumentation',
            fields=[
                ('id_doc', models.AutoField(primary_key=True, serialize=False)),
                ('apiVersion', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='api_mapi.apiversion')),
            ],
        ),
        migrations.AddField(
            model_name='api',
            name='category',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='Category', to='api_mapi.apicategory'),
        ),
        migrations.AddField(
            model_name='api',
            name='forum',
            field=models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='api_mapi.apiforum', verbose_name='Forum'),
        ),
        migrations.AddField(
            model_name='api',
            name='provider',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='api_mapi.fournisseur', verbose_name='Provider'),
        ),
        migrations.CreateModel(
            name='Admin',
            fields=[
                ('id_admin', models.AutoField(primary_key=True, serialize=False)),
                ('groups', models.ManyToManyField(to='auth.group')),
                ('user', models.OneToOneField(null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('user_permissions', models.ManyToManyField(to='auth.permission')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='abonnement',
            name='api',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='api_mapi.api'),
        ),
        migrations.AddField(
            model_name='abonnement',
            name='consumer',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='api_mapi.consommateur'),
        ),
        migrations.AddField(
            model_name='abonnement',
            name='pricing',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='api_mapi.tarification'),
        ),
    ]
